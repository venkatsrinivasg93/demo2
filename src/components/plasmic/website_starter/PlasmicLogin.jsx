// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eLTeFVpwXttNU7zNNtQc1u
// Component: k1ejWPTsEcVq
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: eLTeFVpwXttNU7zNNtQc1u/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: k1ejWPTsEcVq/css
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: h3xY0zUv2tLs/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: gXJcHgGEXhVw/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: 5fA7ko4i97Vq/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: f95Imys39ZC7/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: fhuFetq1X17S/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: ZQwE9m9bHzEV/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: nlzwZbL7otZF/icon
import Placeholder3Icon from "./icons/PlasmicIcon__Placeholder3"; // plasmic-import: -UHYzuo_S4MB/icon
import GIcon from "./icons/PlasmicIcon__G"; // plasmic-import: y6sfHq8oaRw9/icon
import ArrowLeftIcon from "./icons/PlasmicIcon__ArrowLeft"; // plasmic-import: 7EQKlPwChV-w/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: A4v8bVlI7kRl/icon
import group4386ImKlNpUbFcRc from "./images/group4386.svg"; // plasmic-import: imKLNpUbFcRC/picture
import helpCircleGdV9VfQIUx from "./images/helpCircle.svg"; // plasmic-import: gdV-9vfQ_iUX/picture
import helpCircle2M2Xb5Sc8WbhH from "./images/helpCircle2.svg"; // plasmic-import: M2XB5Sc8wbhH/picture
import placeholderRq7YHxaXayX from "./images/placeholder.svg"; // plasmic-import: Rq7YHxaXay-x/picture
import placeholder2XVkiUdBmUv9Y from "./images/placeholder2.svg"; // plasmic-import: xVKIUdBMUv9y/picture
import placeholder4MLbthLupVlT from "./images/placeholder4.svg"; // plasmic-import: mLbthLUPVl_t/picture
import placeholder50BZvjdpEZmOe from "./images/placeholder5.svg"; // plasmic-import: 0bZvjdpEZmOE/picture
import group214MJhrRQqI8D0U from "./images/group214.svg"; // plasmic-import: mJhrRQqI8D0U/picture
import group4382Xi5IYPo0IvCz from "./images/group4382.svg"; // plasmic-import: XI5iYPo0ivCz/picture

createPlasmicElementProxy;

export const PlasmicLogin__VariantProps = new Array();

export const PlasmicLogin__ArgProps = new Array();

const $$ = {};

function PlasmicLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"login"}
        data-plasmic-override={overrides.login}
        className={classNames(projectcss.all, sty.login)}
      >
        <div
          data-plasmic-name={"login2"}
          data-plasmic-override={overrides.login2}
          className={classNames(projectcss.all, sty.login2)}
        >
          <div
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <div
                  data-plasmic-name={"group4385"}
                  data-plasmic-override={overrides.group4385}
                  className={classNames(projectcss.all, sty.group4385)}
                >
                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__vjLyi)}
                    role={"img"}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xvQoX)}
                    displayHeight={"22px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"26.814px"}
                    loading={"lazy"}
                    src={{
                      src: group4386ImKlNpUbFcRc,
                      fullWidth: 26.814,
                      fullHeight: 22,
                      aspectRatio: 1.227273
                    }}
                  />

                  <Vector2Icon
                    className={classNames(projectcss.all, sty.svg__zzZ)}
                    role={"img"}
                  />

                  <Vector3Icon
                    className={classNames(projectcss.all, sty.svg__fn1Uu)}
                    role={"img"}
                  />

                  <Vector4Icon
                    className={classNames(projectcss.all, sty.svg__exaAd)}
                    role={"img"}
                  />

                  <Vector5Icon
                    className={classNames(projectcss.all, sty.svg__xDn1M)}
                    role={"img"}
                  />

                  <Vector6Icon
                    className={classNames(projectcss.all, sty.svg__yNcPl)}
                    role={"img"}
                  />

                  <Vector7Icon
                    className={classNames(projectcss.all, sty.svg__dDeGy)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textAndSupportingText"}
                  data-plasmic-override={overrides.textAndSupportingText}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.textAndSupportingText
                  )}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Welcome to RAG"}
                  </div>
                  <div
                    data-plasmic-name={"supportingText"}
                    data-plasmic-override={overrides.supportingText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.supportingText
                    )}
                  >
                    {"Please enter your details."}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame4386"}
                  data-plasmic-override={overrides.frame4386}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame4386)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"content2"}
                    data-plasmic-override={overrides.content2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.form)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputField"}
                        data-plasmic-override={overrides.inputField}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.inputField)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputWithLabel"}
                          data-plasmic-override={overrides.inputWithLabel}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputWithLabel
                          )}
                        >
                          <div
                            data-plasmic-name={"label"}
                            data-plasmic-override={overrides.label}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.label
                            )}
                          >
                            {"Email"}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.input)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"content3"}
                              data-plasmic-override={overrides.content3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.content3
                              )}
                            >
                              <div
                                data-plasmic-name={"text2"}
                                data-plasmic-override={overrides.text2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text2
                                )}
                              >
                                {"Enter your email"}
                              </div>
                            </Stack__>
                            {false ? (
                              <div
                                data-plasmic-name={"helpIcon"}
                                data-plasmic-override={overrides.helpIcon}
                                className={classNames(
                                  projectcss.all,
                                  sty.helpIcon
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__sgCc5)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"16px"}
                                  loading={"lazy"}
                                  src={{
                                    src: helpCircleGdV9VfQIUx,
                                    fullWidth: 16,
                                    fullHeight: 16,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            ) : null}
                          </Stack__>
                        </Stack__>
                        {false ? (
                          <div
                            data-plasmic-name={"hintText"}
                            data-plasmic-override={overrides.hintText}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hintText
                            )}
                          >
                            {"This is a hint text to help user."}
                          </div>
                        ) : null}
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputField2"}
                        data-plasmic-override={overrides.inputField2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.inputField2)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"inputWithLabel2"}
                          data-plasmic-override={overrides.inputWithLabel2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.inputWithLabel2
                          )}
                        >
                          <div
                            data-plasmic-name={"label2"}
                            data-plasmic-override={overrides.label2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.label2
                            )}
                          >
                            {"Password"}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.input2)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"content4"}
                              data-plasmic-override={overrides.content4}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.content4
                              )}
                            >
                              <div
                                data-plasmic-name={"text3"}
                                data-plasmic-override={overrides.text3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text3
                                )}
                              >
                                {
                                  "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
                                }
                              </div>
                            </Stack__>
                            {false ? (
                              <div
                                data-plasmic-name={"helpIcon2"}
                                data-plasmic-override={overrides.helpIcon2}
                                className={classNames(
                                  projectcss.all,
                                  sty.helpIcon2
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__rZm8O)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"16px"}
                                  loading={"lazy"}
                                  src={{
                                    src: helpCircle2M2Xb5Sc8WbhH,
                                    fullWidth: 16,
                                    fullHeight: 16,
                                    aspectRatio: 1
                                  }}
                                />
                              </div>
                            ) : null}
                          </Stack__>
                        </Stack__>
                        {false ? (
                          <div
                            data-plasmic-name={"hintText2"}
                            data-plasmic-override={overrides.hintText2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.hintText2
                            )}
                          >
                            {"This is a hint text to help user."}
                          </div>
                        ) : null}
                      </Stack__>
                    </Stack__>
                    <div
                      data-plasmic-name={"row"}
                      data-plasmic-override={overrides.row}
                      className={classNames(projectcss.all, sty.row)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.checkbox)}
                      >
                        <div
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          className={classNames(projectcss.all, sty.input3)}
                        >
                          <div
                            data-plasmic-name={"checkboxBase"}
                            data-plasmic-override={overrides.checkboxBase}
                            className={classNames(
                              projectcss.all,
                              sty.checkboxBase
                            )}
                          />
                        </div>
                        <div
                          data-plasmic-name={"textAndSupportingText2"}
                          data-plasmic-override={
                            overrides.textAndSupportingText2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.textAndSupportingText2
                          )}
                        >
                          <div
                            data-plasmic-name={"text4"}
                            data-plasmic-override={overrides.text4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text4
                            )}
                          >
                            {"Remember for 30 days"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"supportingText2"}
                              data-plasmic-override={overrides.supportingText2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.supportingText2
                              )}
                            >
                              {"Save my login details for next time."}
                            </div>
                          ) : null}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button)}
                      >
                        {false ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__a5UWn)}
                            displayHeight={"20px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"20px"}
                            loading={"lazy"}
                            src={{
                              src: placeholderRq7YHxaXayX,
                              fullWidth: 20,
                              fullHeight: 20,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        <div
                          data-plasmic-name={"text5"}
                          data-plasmic-override={overrides.text5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text5
                          )}
                        >
                          {"Forgot password"}
                        </div>
                        {false ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__pZx1A)}
                            displayHeight={"20px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"20px"}
                            loading={"lazy"}
                            src={{
                              src: placeholder2XVkiUdBmUv9Y,
                              fullWidth: 20,
                              fullHeight: 20,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"actions"}
                      data-plasmic-override={overrides.actions}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.actions)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button2)}
                      >
                        {false ? (
                          <Placeholder3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zopLd
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          data-plasmic-name={"text6"}
                          data-plasmic-override={overrides.text6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text6
                          )}
                        >
                          {"Sign in"}
                        </div>
                        {false ? (
                          <Placeholder3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ehOr
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"row2"}
                  data-plasmic-override={overrides.row2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.row2)}
                >
                  <div
                    data-plasmic-name={"text7"}
                    data-plasmic-override={overrides.text7}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text7
                    )}
                  >
                    {"Don\u2019t have an account?"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button3)}
                  >
                    {false ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__eZNoo)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: placeholder4MLbthLupVlT,
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"text8"}
                      data-plasmic-override={overrides.text8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text8
                      )}
                    >
                      {"Sign up"}
                    </div>
                    {false ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___78Bxi)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: placeholder50BZvjdpEZmOe,
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    data-plasmic-name={"group215"}
                    data-plasmic-override={overrides.group215}
                    className={classNames(projectcss.all, sty.group215)}
                  >
                    <div
                      data-plasmic-name={"group216"}
                      data-plasmic-override={overrides.group216}
                      className={classNames(projectcss.all, sty.group216)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"click"}
                        data-plasmic-override={overrides.click}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.click)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__dn4JI)}
                          displayHeight={"32px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"24.18px"}
                          loading={"lazy"}
                          src={{
                            src: group214MJhrRQqI8D0U,
                            fullWidth: 24.18,
                            fullHeight: 32,
                            aspectRatio: 0.805556
                          }}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ha8Cx
                        )}
                      >
                        {"CLICK"}
                      </div>
                    </div>
                  </div>
                </div>
              </Stack__>
            </div>
            {false ? (
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
              >
                <div
                  data-plasmic-name={"frame1"}
                  data-plasmic-override={overrides.frame1}
                  className={classNames(projectcss.all, sty.frame1)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gRyld)}
                    displayHeight={"20px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"52.586px"}
                    loading={"lazy"}
                    src={{
                      src: group4382Xi5IYPo0IvCz,
                      fullWidth: 52.586,
                      fullHeight: 20,
                      aspectRatio: 2.65
                    }}
                  />

                  <GIcon
                    className={classNames(projectcss.all, sty.svg__vU4Rp)}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame4422Khu"}
            data-plasmic-override={overrides.frame4422Khu}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame4422Khu)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gNqN
              )}
            >
              {"Your everyday AI companion"}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4423"}
              data-plasmic-override={overrides.frame4423}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4423)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame4392"}
                data-plasmic-override={overrides.frame4392}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame4392)}
              >
                <div
                  data-plasmic-name={"universalStudiosHollywood1"}
                  data-plasmic-override={overrides.universalStudiosHollywood1}
                  className={classNames(
                    projectcss.all,
                    sty.universalStudiosHollywood1
                  )}
                />

                <div
                  data-plasmic-name={"supportingText3"}
                  data-plasmic-override={overrides.supportingText3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText3
                  )}
                >
                  {"Create a highly itinerary with multiple options."}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame4393"}
                data-plasmic-override={overrides.frame4393}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame4393)}
              >
                <div
                  data-plasmic-name={"universalStudiosHollywood2"}
                  data-plasmic-override={overrides.universalStudiosHollywood2}
                  className={classNames(
                    projectcss.all,
                    sty.universalStudiosHollywood2
                  )}
                />

                <div
                  data-plasmic-name={"supportingText4"}
                  data-plasmic-override={overrides.supportingText4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText4
                  )}
                >
                  {"Provide current entertainment trends"}
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"arrows"}
              data-plasmic-override={overrides.arrows}
              hasGap={true}
              className={classNames(projectcss.all, sty.arrows)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"testiomonialCarouselArrow"}
                data-plasmic-override={overrides.testiomonialCarouselArrow}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.testiomonialCarouselArrow
                )}
              >
                <ArrowLeftIcon
                  className={classNames(projectcss.all, sty.svg___5VH24)}
                  role={"img"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"testiomonialCarouselArrow2"}
                data-plasmic-override={overrides.testiomonialCarouselArrow2}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.testiomonialCarouselArrow2
                )}
              >
                <ArrowRightIcon
                  className={classNames(projectcss.all, sty.svg___90IVs)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "login",
    "login2",
    "section",
    "container",
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click",
    "logo",
    "frame1",
    "frame4422Khu",
    "frame4423",
    "frame4392",
    "universalStudiosHollywood1",
    "supportingText3",
    "frame4393",
    "universalStudiosHollywood2",
    "supportingText4",
    "arrows",
    "testiomonialCarouselArrow",
    "testiomonialCarouselArrow2"
  ],

  login: [
    "login",
    "login2",
    "section",
    "container",
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click",
    "logo",
    "frame1",
    "frame4422Khu",
    "frame4423",
    "frame4392",
    "universalStudiosHollywood1",
    "supportingText3",
    "frame4393",
    "universalStudiosHollywood2",
    "supportingText4",
    "arrows",
    "testiomonialCarouselArrow",
    "testiomonialCarouselArrow2"
  ],

  login2: [
    "login2",
    "section",
    "container",
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click",
    "logo",
    "frame1",
    "frame4422Khu",
    "frame4423",
    "frame4392",
    "universalStudiosHollywood1",
    "supportingText3",
    "frame4393",
    "universalStudiosHollywood2",
    "supportingText4",
    "arrows",
    "testiomonialCarouselArrow",
    "testiomonialCarouselArrow2"
  ],

  section: [
    "section",
    "container",
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click",
    "logo",
    "frame1"
  ],

  container: [
    "container",
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click"
  ],

  content: [
    "content",
    "group4385",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6",
    "row2",
    "text7",
    "button3",
    "text8",
    "freeBox",
    "group215",
    "group216",
    "click"
  ],

  group4385: ["group4385"],
  textAndSupportingText: ["textAndSupportingText", "text", "supportingText"],
  text: ["text"],
  supportingText: ["supportingText"],
  frame4386: [
    "frame4386",
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6"
  ],

  content2: [
    "content2",
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5",
    "actions",
    "button2",
    "text6"
  ],

  form: [
    "form",
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2"
  ],

  inputField: [
    "inputField",
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon",
    "hintText"
  ],

  inputWithLabel: [
    "inputWithLabel",
    "label",
    "input",
    "content3",
    "text2",
    "helpIcon"
  ],

  label: ["label"],
  input: ["input", "content3", "text2", "helpIcon"],
  content3: ["content3", "text2"],
  text2: ["text2"],
  helpIcon: ["helpIcon"],
  hintText: ["hintText"],
  inputField2: [
    "inputField2",
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2",
    "hintText2"
  ],

  inputWithLabel2: [
    "inputWithLabel2",
    "label2",
    "input2",
    "content4",
    "text3",
    "helpIcon2"
  ],

  label2: ["label2"],
  input2: ["input2", "content4", "text3", "helpIcon2"],
  content4: ["content4", "text3"],
  text3: ["text3"],
  helpIcon2: ["helpIcon2"],
  hintText2: ["hintText2"],
  row: [
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2",
    "button",
    "text5"
  ],

  checkbox: [
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text4",
    "supportingText2"
  ],

  input3: ["input3", "checkboxBase"],
  checkboxBase: ["checkboxBase"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text4",
    "supportingText2"
  ],

  text4: ["text4"],
  supportingText2: ["supportingText2"],
  button: ["button", "text5"],
  text5: ["text5"],
  actions: ["actions", "button2", "text6"],
  button2: ["button2", "text6"],
  text6: ["text6"],
  row2: ["row2", "text7", "button3", "text8"],
  text7: ["text7"],
  button3: ["button3", "text8"],
  text8: ["text8"],
  freeBox: ["freeBox", "group215", "group216", "click"],
  group215: ["group215", "group216", "click"],
  group216: ["group216", "click"],
  click: ["click"],
  logo: ["logo", "frame1"],
  frame1: ["frame1"],
  frame4422Khu: [
    "frame4422Khu",
    "frame4423",
    "frame4392",
    "universalStudiosHollywood1",
    "supportingText3",
    "frame4393",
    "universalStudiosHollywood2",
    "supportingText4",
    "arrows",
    "testiomonialCarouselArrow",
    "testiomonialCarouselArrow2"
  ],

  frame4423: [
    "frame4423",
    "frame4392",
    "universalStudiosHollywood1",
    "supportingText3",
    "frame4393",
    "universalStudiosHollywood2",
    "supportingText4"
  ],

  frame4392: ["frame4392", "universalStudiosHollywood1", "supportingText3"],
  universalStudiosHollywood1: ["universalStudiosHollywood1"],
  supportingText3: ["supportingText3"],
  frame4393: ["frame4393", "universalStudiosHollywood2", "supportingText4"],
  universalStudiosHollywood2: ["universalStudiosHollywood2"],
  supportingText4: ["supportingText4"],
  arrows: ["arrows", "testiomonialCarouselArrow", "testiomonialCarouselArrow2"],
  testiomonialCarouselArrow: ["testiomonialCarouselArrow"],
  testiomonialCarouselArrow2: ["testiomonialCarouselArrow2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    login2: makeNodeComponent("login2"),
    section: makeNodeComponent("section"),
    container: makeNodeComponent("container"),
    content: makeNodeComponent("content"),
    group4385: makeNodeComponent("group4385"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text: makeNodeComponent("text"),
    supportingText: makeNodeComponent("supportingText"),
    frame4386: makeNodeComponent("frame4386"),
    content2: makeNodeComponent("content2"),
    form: makeNodeComponent("form"),
    inputField: makeNodeComponent("inputField"),
    inputWithLabel: makeNodeComponent("inputWithLabel"),
    label: makeNodeComponent("label"),
    input: makeNodeComponent("input"),
    content3: makeNodeComponent("content3"),
    text2: makeNodeComponent("text2"),
    helpIcon: makeNodeComponent("helpIcon"),
    hintText: makeNodeComponent("hintText"),
    inputField2: makeNodeComponent("inputField2"),
    inputWithLabel2: makeNodeComponent("inputWithLabel2"),
    label2: makeNodeComponent("label2"),
    input2: makeNodeComponent("input2"),
    content4: makeNodeComponent("content4"),
    text3: makeNodeComponent("text3"),
    helpIcon2: makeNodeComponent("helpIcon2"),
    hintText2: makeNodeComponent("hintText2"),
    row: makeNodeComponent("row"),
    checkbox: makeNodeComponent("checkbox"),
    input3: makeNodeComponent("input3"),
    checkboxBase: makeNodeComponent("checkboxBase"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text4: makeNodeComponent("text4"),
    supportingText2: makeNodeComponent("supportingText2"),
    button: makeNodeComponent("button"),
    text5: makeNodeComponent("text5"),
    actions: makeNodeComponent("actions"),
    button2: makeNodeComponent("button2"),
    text6: makeNodeComponent("text6"),
    row2: makeNodeComponent("row2"),
    text7: makeNodeComponent("text7"),
    button3: makeNodeComponent("button3"),
    text8: makeNodeComponent("text8"),
    freeBox: makeNodeComponent("freeBox"),
    group215: makeNodeComponent("group215"),
    group216: makeNodeComponent("group216"),
    click: makeNodeComponent("click"),
    logo: makeNodeComponent("logo"),
    frame1: makeNodeComponent("frame1"),
    frame4422Khu: makeNodeComponent("frame4422Khu"),
    frame4423: makeNodeComponent("frame4423"),
    frame4392: makeNodeComponent("frame4392"),
    universalStudiosHollywood1: makeNodeComponent("universalStudiosHollywood1"),
    supportingText3: makeNodeComponent("supportingText3"),
    frame4393: makeNodeComponent("frame4393"),
    universalStudiosHollywood2: makeNodeComponent("universalStudiosHollywood2"),
    supportingText4: makeNodeComponent("supportingText4"),
    arrows: makeNodeComponent("arrows"),
    testiomonialCarouselArrow: makeNodeComponent("testiomonialCarouselArrow"),
    testiomonialCarouselArrow2: makeNodeComponent("testiomonialCarouselArrow2"),
    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
